{
  "version": 3,
  "sources": ["../../../../../apps/whatsapp_chatbot/whatsapp_chatbot/public/js/qr_code.js", "../../../../../apps/whatsapp_chatbot/whatsapp_chatbot/public/js/conf.js", "../../../../../apps/whatsapp_chatbot/whatsapp_chatbot/public/js/whatsapp_chatbot.bundle.js"],
  "sourcesContent": ["//---------------------------------------------------------------------\n//\n// QR Code Generator for JavaScript\n//\n// Copyright (c) 2009 Kazuhiko Arase\n//\n// URL: http://www.d-project.com/\n//\n// Licensed under the MIT license:\n//  http://www.opensource.org/licenses/mit-license.php\n//\n// The word 'QR Code' is registered trademark of\n// DENSO WAVE INCORPORATED\n//  http://www.denso-wave.com/qrcode/faqpatent-e.html\n//\n//---------------------------------------------------------------------\nfrappe.provide(\"accurate.utils\");\n\naccurate.utils.qrcode = function() {\n\n    //---------------------------------------------------------------------\n    // qrcode\n    //---------------------------------------------------------------------\n  \n    /**\n     * qrcode\n     * @param typeNumber 1 to 40\n     * @param errorCorrectionLevel 'L','M','Q','H'\n     */\n    var qrcode = function(typeNumber, errorCorrectionLevel) {\n  \n      var PAD0 = 0xEC;\n      var PAD1 = 0x11;\n  \n      var _typeNumber = typeNumber;\n      var _errorCorrectionLevel = QRErrorCorrectionLevel[errorCorrectionLevel];\n      var _modules = null;\n      var _moduleCount = 0;\n      var _dataCache = null;\n      var _dataList = [];\n  \n      var _this = {};\n  \n      var makeImpl = function(test, maskPattern) {\n  \n        _moduleCount = _typeNumber * 4 + 17;\n        _modules = function(moduleCount) {\n          var modules = new Array(moduleCount);\n          for (var row = 0; row < moduleCount; row += 1) {\n            modules[row] = new Array(moduleCount);\n            for (var col = 0; col < moduleCount; col += 1) {\n              modules[row][col] = null;\n            }\n          }\n          return modules;\n        }(_moduleCount);\n  \n        setupPositionProbePattern(0, 0);\n        setupPositionProbePattern(_moduleCount - 7, 0);\n        setupPositionProbePattern(0, _moduleCount - 7);\n        setupPositionAdjustPattern();\n        setupTimingPattern();\n        setupTypeInfo(test, maskPattern);\n  \n        if (_typeNumber >= 7) {\n          setupTypeNumber(test);\n        }\n  \n        if (_dataCache == null) {\n          _dataCache = createData(_typeNumber, _errorCorrectionLevel, _dataList);\n        }\n  \n        mapData(_dataCache, maskPattern);\n      };\n  \n      var setupPositionProbePattern = function(row, col) {\n  \n        for (var r = -1; r <= 7; r += 1) {\n  \n          if (row + r <= -1 || _moduleCount <= row + r) continue;\n  \n          for (var c = -1; c <= 7; c += 1) {\n  \n            if (col + c <= -1 || _moduleCount <= col + c) continue;\n  \n            if ( (0 <= r && r <= 6 && (c == 0 || c == 6) )\n                || (0 <= c && c <= 6 && (r == 0 || r == 6) )\n                || (2 <= r && r <= 4 && 2 <= c && c <= 4) ) {\n              _modules[row + r][col + c] = true;\n            } else {\n              _modules[row + r][col + c] = false;\n            }\n          }\n        }\n      };\n  \n      var getBestMaskPattern = function() {\n  \n        var minLostPoint = 0;\n        var pattern = 0;\n  \n        for (var i = 0; i < 8; i += 1) {\n  \n          makeImpl(true, i);\n  \n          var lostPoint = QRUtil.getLostPoint(_this);\n  \n          if (i == 0 || minLostPoint > lostPoint) {\n            minLostPoint = lostPoint;\n            pattern = i;\n          }\n        }\n  \n        return pattern;\n      };\n  \n      var setupTimingPattern = function() {\n  \n        for (var r = 8; r < _moduleCount - 8; r += 1) {\n          if (_modules[r][6] != null) {\n            continue;\n          }\n          _modules[r][6] = (r % 2 == 0);\n        }\n  \n        for (var c = 8; c < _moduleCount - 8; c += 1) {\n          if (_modules[6][c] != null) {\n            continue;\n          }\n          _modules[6][c] = (c % 2 == 0);\n        }\n      };\n  \n      var setupPositionAdjustPattern = function() {\n  \n        var pos = QRUtil.getPatternPosition(_typeNumber);\n  \n        for (var i = 0; i < pos.length; i += 1) {\n  \n          for (var j = 0; j < pos.length; j += 1) {\n  \n            var row = pos[i];\n            var col = pos[j];\n  \n            if (_modules[row][col] != null) {\n              continue;\n            }\n  \n            for (var r = -2; r <= 2; r += 1) {\n  \n              for (var c = -2; c <= 2; c += 1) {\n  \n                if (r == -2 || r == 2 || c == -2 || c == 2\n                    || (r == 0 && c == 0) ) {\n                  _modules[row + r][col + c] = true;\n                } else {\n                  _modules[row + r][col + c] = false;\n                }\n              }\n            }\n          }\n        }\n      };\n  \n      var setupTypeNumber = function(test) {\n  \n        var bits = QRUtil.getBCHTypeNumber(_typeNumber);\n  \n        for (var i = 0; i < 18; i += 1) {\n          var mod = (!test && ( (bits >> i) & 1) == 1);\n          _modules[Math.floor(i / 3)][i % 3 + _moduleCount - 8 - 3] = mod;\n        }\n  \n        for (var i = 0; i < 18; i += 1) {\n          var mod = (!test && ( (bits >> i) & 1) == 1);\n          _modules[i % 3 + _moduleCount - 8 - 3][Math.floor(i / 3)] = mod;\n        }\n      };\n  \n      var setupTypeInfo = function(test, maskPattern) {\n  \n        var data = (_errorCorrectionLevel << 3) | maskPattern;\n        var bits = QRUtil.getBCHTypeInfo(data);\n  \n        // vertical\n        for (var i = 0; i < 15; i += 1) {\n  \n          var mod = (!test && ( (bits >> i) & 1) == 1);\n  \n          if (i < 6) {\n            _modules[i][8] = mod;\n          } else if (i < 8) {\n            _modules[i + 1][8] = mod;\n          } else {\n            _modules[_moduleCount - 15 + i][8] = mod;\n          }\n        }\n  \n        // horizontal\n        for (var i = 0; i < 15; i += 1) {\n  \n          var mod = (!test && ( (bits >> i) & 1) == 1);\n  \n          if (i < 8) {\n            _modules[8][_moduleCount - i - 1] = mod;\n          } else if (i < 9) {\n            _modules[8][15 - i - 1 + 1] = mod;\n          } else {\n            _modules[8][15 - i - 1] = mod;\n          }\n        }\n  \n        // fixed module\n        _modules[_moduleCount - 8][8] = (!test);\n      };\n  \n      var mapData = function(data, maskPattern) {\n  \n        var inc = -1;\n        var row = _moduleCount - 1;\n        var bitIndex = 7;\n        var byteIndex = 0;\n        var maskFunc = QRUtil.getMaskFunction(maskPattern);\n  \n        for (var col = _moduleCount - 1; col > 0; col -= 2) {\n  \n          if (col == 6) col -= 1;\n  \n          while (true) {\n  \n            for (var c = 0; c < 2; c += 1) {\n  \n              if (_modules[row][col - c] == null) {\n  \n                var dark = false;\n  \n                if (byteIndex < data.length) {\n                  dark = ( ( (data[byteIndex] >>> bitIndex) & 1) == 1);\n                }\n  \n                var mask = maskFunc(row, col - c);\n  \n                if (mask) {\n                  dark = !dark;\n                }\n  \n                _modules[row][col - c] = dark;\n                bitIndex -= 1;\n  \n                if (bitIndex == -1) {\n                  byteIndex += 1;\n                  bitIndex = 7;\n                }\n              }\n            }\n  \n            row += inc;\n  \n            if (row < 0 || _moduleCount <= row) {\n              row -= inc;\n              inc = -inc;\n              break;\n            }\n          }\n        }\n      };\n  \n      var createBytes = function(buffer, rsBlocks) {\n  \n        var offset = 0;\n  \n        var maxDcCount = 0;\n        var maxEcCount = 0;\n  \n        var dcdata = new Array(rsBlocks.length);\n        var ecdata = new Array(rsBlocks.length);\n  \n        for (var r = 0; r < rsBlocks.length; r += 1) {\n  \n          var dcCount = rsBlocks[r].dataCount;\n          var ecCount = rsBlocks[r].totalCount - dcCount;\n  \n          maxDcCount = Math.max(maxDcCount, dcCount);\n          maxEcCount = Math.max(maxEcCount, ecCount);\n  \n          dcdata[r] = new Array(dcCount);\n  \n          for (var i = 0; i < dcdata[r].length; i += 1) {\n            dcdata[r][i] = 0xff & buffer.getBuffer()[i + offset];\n          }\n          offset += dcCount;\n  \n          var rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);\n          var rawPoly = qrPolynomial(dcdata[r], rsPoly.getLength() - 1);\n  \n          var modPoly = rawPoly.mod(rsPoly);\n          ecdata[r] = new Array(rsPoly.getLength() - 1);\n          for (var i = 0; i < ecdata[r].length; i += 1) {\n            var modIndex = i + modPoly.getLength() - ecdata[r].length;\n            ecdata[r][i] = (modIndex >= 0)? modPoly.getAt(modIndex) : 0;\n          }\n        }\n  \n        var totalCodeCount = 0;\n        for (var i = 0; i < rsBlocks.length; i += 1) {\n          totalCodeCount += rsBlocks[i].totalCount;\n        }\n  \n        var data = new Array(totalCodeCount);\n        var index = 0;\n  \n        for (var i = 0; i < maxDcCount; i += 1) {\n          for (var r = 0; r < rsBlocks.length; r += 1) {\n            if (i < dcdata[r].length) {\n              data[index] = dcdata[r][i];\n              index += 1;\n            }\n          }\n        }\n  \n        for (var i = 0; i < maxEcCount; i += 1) {\n          for (var r = 0; r < rsBlocks.length; r += 1) {\n            if (i < ecdata[r].length) {\n              data[index] = ecdata[r][i];\n              index += 1;\n            }\n          }\n        }\n  \n        return data;\n      };\n  \n      var createData = function(typeNumber, errorCorrectionLevel, dataList) {\n  \n        var rsBlocks = QRRSBlock.getRSBlocks(typeNumber, errorCorrectionLevel);\n  \n        var buffer = qrBitBuffer();\n  \n        for (var i = 0; i < dataList.length; i += 1) {\n          var data = dataList[i];\n          buffer.put(data.getMode(), 4);\n          buffer.put(data.getLength(), QRUtil.getLengthInBits(data.getMode(), typeNumber) );\n          data.write(buffer);\n        }\n  \n        // calc num max data.\n        var totalDataCount = 0;\n        for (var i = 0; i < rsBlocks.length; i += 1) {\n          totalDataCount += rsBlocks[i].dataCount;\n        }\n  \n        if (buffer.getLengthInBits() > totalDataCount * 8) {\n          throw 'code length overflow. ('\n            + buffer.getLengthInBits()\n            + '>'\n            + totalDataCount * 8\n            + ')';\n        }\n  \n        // end code\n        if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {\n          buffer.put(0, 4);\n        }\n  \n        // padding\n        while (buffer.getLengthInBits() % 8 != 0) {\n          buffer.putBit(false);\n        }\n  \n        // padding\n        while (true) {\n  \n          if (buffer.getLengthInBits() >= totalDataCount * 8) {\n            break;\n          }\n          buffer.put(PAD0, 8);\n  \n          if (buffer.getLengthInBits() >= totalDataCount * 8) {\n            break;\n          }\n          buffer.put(PAD1, 8);\n        }\n  \n        return createBytes(buffer, rsBlocks);\n      };\n  \n      _this.addData = function(data, mode) {\n  \n        mode = mode || 'Byte';\n  \n        var newData = null;\n  \n        switch(mode) {\n        case 'Numeric' :\n          newData = qrNumber(data);\n          break;\n        case 'Alphanumeric' :\n          newData = qrAlphaNum(data);\n          break;\n        case 'Byte' :\n          newData = qr8BitByte(data);\n          break;\n        case 'Kanji' :\n          newData = qrKanji(data);\n          break;\n        default :\n          throw 'mode:' + mode;\n        }\n  \n        _dataList.push(newData);\n        _dataCache = null;\n      };\n  \n      _this.isDark = function(row, col) {\n        if (row < 0 || _moduleCount <= row || col < 0 || _moduleCount <= col) {\n          throw row + ',' + col;\n        }\n        return _modules[row][col];\n      };\n  \n      _this.getModuleCount = function() {\n        return _moduleCount;\n      };\n  \n      _this.make = function() {\n        if (_typeNumber < 1) {\n          var typeNumber = 1;\n  \n          for (; typeNumber < 40; typeNumber++) {\n            var rsBlocks = QRRSBlock.getRSBlocks(typeNumber, _errorCorrectionLevel);\n            var buffer = qrBitBuffer();\n  \n            for (var i = 0; i < _dataList.length; i++) {\n              var data = _dataList[i];\n              buffer.put(data.getMode(), 4);\n              buffer.put(data.getLength(), QRUtil.getLengthInBits(data.getMode(), typeNumber) );\n              data.write(buffer);\n            }\n  \n            var totalDataCount = 0;\n            for (var i = 0; i < rsBlocks.length; i++) {\n              totalDataCount += rsBlocks[i].dataCount;\n            }\n  \n            if (buffer.getLengthInBits() <= totalDataCount * 8) {\n              break;\n            }\n          }\n  \n          _typeNumber = typeNumber;\n        }\n  \n        makeImpl(false, getBestMaskPattern() );\n      };\n  \n      _this.createTableTag = function(cellSize, margin) {\n  \n        cellSize = cellSize || 2;\n        margin = (typeof margin == 'undefined')? cellSize * 4 : margin;\n  \n        var qrHtml = '';\n  \n        qrHtml += '<table style=\"';\n        qrHtml += ' border-width: 0px; border-style: none;';\n        qrHtml += ' border-collapse: collapse;';\n        qrHtml += ' padding: 0px; margin: ' + margin + 'px;';\n        qrHtml += '\">';\n        qrHtml += '<tbody>';\n  \n        for (var r = 0; r < _this.getModuleCount(); r += 1) {\n  \n          qrHtml += '<tr>';\n  \n          for (var c = 0; c < _this.getModuleCount(); c += 1) {\n            qrHtml += '<td style=\"';\n            qrHtml += ' border-width: 0px; border-style: none;';\n            qrHtml += ' border-collapse: collapse;';\n            qrHtml += ' padding: 0px; margin: 0px;';\n            qrHtml += ' width: ' + cellSize + 'px;';\n            qrHtml += ' height: ' + cellSize + 'px;';\n            qrHtml += ' background-color: ';\n            qrHtml += _this.isDark(r, c)? '#000000' : '#ffffff';\n            qrHtml += ';';\n            qrHtml += '\"/>';\n          }\n  \n          qrHtml += '</tr>';\n        }\n  \n        qrHtml += '</tbody>';\n        qrHtml += '</table>';\n  \n        return qrHtml;\n      };\n  \n      _this.createSvgTag = function(cellSize, margin, alt, title) {\n  \n        var opts = {};\n        if (typeof arguments[0] == 'object') {\n          // Called by options.\n          opts = arguments[0];\n          // overwrite cellSize and margin.\n          cellSize = opts.cellSize;\n          margin = opts.margin;\n          alt = opts.alt;\n          title = opts.title;\n        }\n  \n        cellSize = cellSize || 2;\n        margin = (typeof margin == 'undefined')? cellSize * 4 : margin;\n  \n        // Compose alt property surrogate\n        alt = (typeof alt === 'string') ? {text: alt} : alt || {};\n        alt.text = alt.text || null;\n        alt.id = (alt.text) ? alt.id || 'qrcode-description' : null;\n  \n        // Compose title property surrogate\n        title = (typeof title === 'string') ? {text: title} : title || {};\n        title.text = title.text || null;\n        title.id = (title.text) ? title.id || 'qrcode-title' : null;\n  \n        var size = _this.getModuleCount() * cellSize + margin * 2;\n        var c, mc, r, mr, qrSvg='', rect;\n  \n        rect = 'l' + cellSize + ',0 0,' + cellSize +\n          ' -' + cellSize + ',0 0,-' + cellSize + 'z ';\n  \n        qrSvg += '<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"';\n        qrSvg += !opts.scalable ? ' width=\"' + size + 'px\" height=\"' + size + 'px\"' : '';\n        qrSvg += ' viewBox=\"0 0 ' + size + ' ' + size + '\" ';\n        qrSvg += ' preserveAspectRatio=\"xMinYMin meet\"';\n        qrSvg += (title.text || alt.text) ? ' role=\"img\" aria-labelledby=\"' +\n            escapeXml([title.id, alt.id].join(' ').trim() ) + '\"' : '';\n        qrSvg += '>';\n        qrSvg += (title.text) ? '<title id=\"' + escapeXml(title.id) + '\">' +\n            escapeXml(title.text) + '</title>' : '';\n        qrSvg += (alt.text) ? '<description id=\"' + escapeXml(alt.id) + '\">' +\n            escapeXml(alt.text) + '</description>' : '';\n        qrSvg += '<rect width=\"100%\" height=\"100%\" fill=\"white\" cx=\"0\" cy=\"0\"/>';\n        qrSvg += '<path d=\"';\n  \n        for (r = 0; r < _this.getModuleCount(); r += 1) {\n          mr = r * cellSize + margin;\n          for (c = 0; c < _this.getModuleCount(); c += 1) {\n            if (_this.isDark(r, c) ) {\n              mc = c*cellSize+margin;\n              qrSvg += 'M' + mc + ',' + mr + rect;\n            }\n          }\n        }\n  \n        qrSvg += '\" stroke=\"transparent\" fill=\"black\"/>';\n        qrSvg += '</svg>';\n  \n        return qrSvg;\n      };\n  \n      _this.createDataURL = function(cellSize, margin) {\n  \n        cellSize = cellSize || 2;\n        margin = (typeof margin == 'undefined')? cellSize * 4 : margin;\n  \n        var size = _this.getModuleCount() * cellSize + margin * 2;\n        var min = margin;\n        var max = size - margin;\n  \n        return createDataURL(size, size, function(x, y) {\n          if (min <= x && x < max && min <= y && y < max) {\n            var c = Math.floor( (x - min) / cellSize);\n            var r = Math.floor( (y - min) / cellSize);\n            return _this.isDark(r, c)? 0 : 1;\n          } else {\n            return 1;\n          }\n        } );\n      };\n  \n      _this.createImgTag = function(cellSize, margin, alt) {\n  \n        cellSize = cellSize || 2;\n        margin = (typeof margin == 'undefined')? cellSize * 4 : margin;\n  \n        var size = _this.getModuleCount() * cellSize + margin * 2;\n  \n        var img = '';\n        img += '<img';\n        img += '\\u0020src=\"';\n        img += _this.createDataURL(cellSize, margin);\n        img += '\"';\n        img += '\\u0020width=\"';\n        img += size;\n        img += '\"';\n        img += '\\u0020height=\"';\n        img += size;\n        img += '\"';\n        if (alt) {\n          img += '\\u0020alt=\"';\n          img += escapeXml(alt);\n          img += '\"';\n        }\n        img += '/>';\n  \n        return img;\n      };\n  \n      var escapeXml = function(s) {\n        var escaped = '';\n        for (var i = 0; i < s.length; i += 1) {\n          var c = s.charAt(i);\n          switch(c) {\n          case '<': escaped += '&lt;'; break;\n          case '>': escaped += '&gt;'; break;\n          case '&': escaped += '&amp;'; break;\n          case '\"': escaped += '&quot;'; break;\n          default : escaped += c; break;\n          }\n        }\n        return escaped;\n      };\n  \n      var _createHalfASCII = function(margin) {\n        var cellSize = 1;\n        margin = (typeof margin == 'undefined')? cellSize * 2 : margin;\n  \n        var size = _this.getModuleCount() * cellSize + margin * 2;\n        var min = margin;\n        var max = size - margin;\n  \n        var y, x, r1, r2, p;\n  \n        var blocks = {\n          '\u2588\u2588': '\u2588',\n          '\u2588 ': '\u2580',\n          ' \u2588': '\u2584',\n          '  ': ' '\n        };\n  \n        var blocksLastLineNoMargin = {\n          '\u2588\u2588': '\u2580',\n          '\u2588 ': '\u2580',\n          ' \u2588': ' ',\n          '  ': ' '\n        };\n  \n        var ascii = '';\n        for (y = 0; y < size; y += 2) {\n          r1 = Math.floor((y - min) / cellSize);\n          r2 = Math.floor((y + 1 - min) / cellSize);\n          for (x = 0; x < size; x += 1) {\n            p = '\u2588';\n  \n            if (min <= x && x < max && min <= y && y < max && _this.isDark(r1, Math.floor((x - min) / cellSize))) {\n              p = ' ';\n            }\n  \n            if (min <= x && x < max && min <= y+1 && y+1 < max && _this.isDark(r2, Math.floor((x - min) / cellSize))) {\n              p += ' ';\n            }\n            else {\n              p += '\u2588';\n            }\n  \n            // Output 2 characters per pixel, to create full square. 1 character per pixels gives only half width of square.\n            ascii += (margin < 1 && y+1 >= max) ? blocksLastLineNoMargin[p] : blocks[p];\n          }\n  \n          ascii += '\\n';\n        }\n  \n        if (size % 2 && margin > 0) {\n          return ascii.substring(0, ascii.length - size - 1) + Array(size+1).join('\u2580');\n        }\n  \n        return ascii.substring(0, ascii.length-1);\n      };\n  \n      _this.createASCII = function(cellSize, margin) {\n        cellSize = cellSize || 1;\n  \n        if (cellSize < 2) {\n          return _createHalfASCII(margin);\n        }\n  \n        cellSize -= 1;\n        margin = (typeof margin == 'undefined')? cellSize * 2 : margin;\n  \n        var size = _this.getModuleCount() * cellSize + margin * 2;\n        var min = margin;\n        var max = size - margin;\n  \n        var y, x, r, p;\n  \n        var white = Array(cellSize+1).join('\u2588\u2588');\n        var black = Array(cellSize+1).join('  ');\n  \n        var ascii = '';\n        var line = '';\n        for (y = 0; y < size; y += 1) {\n          r = Math.floor( (y - min) / cellSize);\n          line = '';\n          for (x = 0; x < size; x += 1) {\n            p = 1;\n  \n            if (min <= x && x < max && min <= y && y < max && _this.isDark(r, Math.floor((x - min) / cellSize))) {\n              p = 0;\n            }\n  \n            // Output 2 characters per pixel, to create full square. 1 character per pixels gives only half width of square.\n            line += p ? white : black;\n          }\n  \n          for (r = 0; r < cellSize; r += 1) {\n            ascii += line + '\\n';\n          }\n        }\n  \n        return ascii.substring(0, ascii.length-1);\n      };\n  \n      _this.renderTo2dContext = function(context, cellSize) {\n        cellSize = cellSize || 2;\n        var length = _this.getModuleCount();\n        for (var row = 0; row < length; row++) {\n          for (var col = 0; col < length; col++) {\n            context.fillStyle = _this.isDark(row, col) ? 'black' : 'white';\n            context.fillRect(row * cellSize, col * cellSize, cellSize, cellSize);\n          }\n        }\n      }\n  \n      return _this;\n    };\n  \n    //---------------------------------------------------------------------\n    // qrcode.stringToBytes\n    //---------------------------------------------------------------------\n  \n    qrcode.stringToBytesFuncs = {\n      'default' : function(s) {\n        var bytes = [];\n        for (var i = 0; i < s.length; i += 1) {\n          var c = s.charCodeAt(i);\n          bytes.push(c & 0xff);\n        }\n        return bytes;\n      }\n    };\n  \n    qrcode.stringToBytes = qrcode.stringToBytesFuncs['default'];\n  \n    //---------------------------------------------------------------------\n    // qrcode.createStringToBytes\n    //---------------------------------------------------------------------\n  \n    /**\n     * @param unicodeData base64 string of byte array.\n     * [16bit Unicode],[16bit Bytes], ...\n     * @param numChars\n     */\n    qrcode.createStringToBytes = function(unicodeData, numChars) {\n  \n      // create conversion map.\n  \n      var unicodeMap = function() {\n  \n        var bin = base64DecodeInputStream(unicodeData);\n        var read = function() {\n          var b = bin.read();\n          if (b == -1) throw 'eof';\n          return b;\n        };\n  \n        var count = 0;\n        var unicodeMap = {};\n        while (true) {\n          var b0 = bin.read();\n          if (b0 == -1) break;\n          var b1 = read();\n          var b2 = read();\n          var b3 = read();\n          var k = String.fromCharCode( (b0 << 8) | b1);\n          var v = (b2 << 8) | b3;\n          unicodeMap[k] = v;\n          count += 1;\n        }\n        if (count != numChars) {\n          throw count + ' != ' + numChars;\n        }\n  \n        return unicodeMap;\n      }();\n  \n      var unknownChar = '?'.charCodeAt(0);\n  \n      return function(s) {\n        var bytes = [];\n        for (var i = 0; i < s.length; i += 1) {\n          var c = s.charCodeAt(i);\n          if (c < 128) {\n            bytes.push(c);\n          } else {\n            var b = unicodeMap[s.charAt(i)];\n            if (typeof b == 'number') {\n              if ( (b & 0xff) == b) {\n                // 1byte\n                bytes.push(b);\n              } else {\n                // 2bytes\n                bytes.push(b >>> 8);\n                bytes.push(b & 0xff);\n              }\n            } else {\n              bytes.push(unknownChar);\n            }\n          }\n        }\n        return bytes;\n      };\n    };\n  \n    //---------------------------------------------------------------------\n    // QRMode\n    //---------------------------------------------------------------------\n  \n    var QRMode = {\n      MODE_NUMBER :    1 << 0,\n      MODE_ALPHA_NUM : 1 << 1,\n      MODE_8BIT_BYTE : 1 << 2,\n      MODE_KANJI :     1 << 3\n    };\n  \n    //---------------------------------------------------------------------\n    // QRErrorCorrectionLevel\n    //---------------------------------------------------------------------\n  \n    var QRErrorCorrectionLevel = {\n      L : 1,\n      M : 0,\n      Q : 3,\n      H : 2\n    };\n  \n    //---------------------------------------------------------------------\n    // QRMaskPattern\n    //---------------------------------------------------------------------\n  \n    var QRMaskPattern = {\n      PATTERN000 : 0,\n      PATTERN001 : 1,\n      PATTERN010 : 2,\n      PATTERN011 : 3,\n      PATTERN100 : 4,\n      PATTERN101 : 5,\n      PATTERN110 : 6,\n      PATTERN111 : 7\n    };\n  \n    //---------------------------------------------------------------------\n    // QRUtil\n    //---------------------------------------------------------------------\n  \n    var QRUtil = function() {\n  \n      var PATTERN_POSITION_TABLE = [\n        [],\n        [6, 18],\n        [6, 22],\n        [6, 26],\n        [6, 30],\n        [6, 34],\n        [6, 22, 38],\n        [6, 24, 42],\n        [6, 26, 46],\n        [6, 28, 50],\n        [6, 30, 54],\n        [6, 32, 58],\n        [6, 34, 62],\n        [6, 26, 46, 66],\n        [6, 26, 48, 70],\n        [6, 26, 50, 74],\n        [6, 30, 54, 78],\n        [6, 30, 56, 82],\n        [6, 30, 58, 86],\n        [6, 34, 62, 90],\n        [6, 28, 50, 72, 94],\n        [6, 26, 50, 74, 98],\n        [6, 30, 54, 78, 102],\n        [6, 28, 54, 80, 106],\n        [6, 32, 58, 84, 110],\n        [6, 30, 58, 86, 114],\n        [6, 34, 62, 90, 118],\n        [6, 26, 50, 74, 98, 122],\n        [6, 30, 54, 78, 102, 126],\n        [6, 26, 52, 78, 104, 130],\n        [6, 30, 56, 82, 108, 134],\n        [6, 34, 60, 86, 112, 138],\n        [6, 30, 58, 86, 114, 142],\n        [6, 34, 62, 90, 118, 146],\n        [6, 30, 54, 78, 102, 126, 150],\n        [6, 24, 50, 76, 102, 128, 154],\n        [6, 28, 54, 80, 106, 132, 158],\n        [6, 32, 58, 84, 110, 136, 162],\n        [6, 26, 54, 82, 110, 138, 166],\n        [6, 30, 58, 86, 114, 142, 170]\n      ];\n      var G15 = (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0);\n      var G18 = (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0);\n      var G15_MASK = (1 << 14) | (1 << 12) | (1 << 10) | (1 << 4) | (1 << 1);\n  \n      var _this = {};\n  \n      var getBCHDigit = function(data) {\n        var digit = 0;\n        while (data != 0) {\n          digit += 1;\n          data >>>= 1;\n        }\n        return digit;\n      };\n  \n      _this.getBCHTypeInfo = function(data) {\n        var d = data << 10;\n        while (getBCHDigit(d) - getBCHDigit(G15) >= 0) {\n          d ^= (G15 << (getBCHDigit(d) - getBCHDigit(G15) ) );\n        }\n        return ( (data << 10) | d) ^ G15_MASK;\n      };\n  \n      _this.getBCHTypeNumber = function(data) {\n        var d = data << 12;\n        while (getBCHDigit(d) - getBCHDigit(G18) >= 0) {\n          d ^= (G18 << (getBCHDigit(d) - getBCHDigit(G18) ) );\n        }\n        return (data << 12) | d;\n      };\n  \n      _this.getPatternPosition = function(typeNumber) {\n        return PATTERN_POSITION_TABLE[typeNumber - 1];\n      };\n  \n      _this.getMaskFunction = function(maskPattern) {\n  \n        switch (maskPattern) {\n  \n        case QRMaskPattern.PATTERN000 :\n          return function(i, j) { return (i + j) % 2 == 0; };\n        case QRMaskPattern.PATTERN001 :\n          return function(i, j) { return i % 2 == 0; };\n        case QRMaskPattern.PATTERN010 :\n          return function(i, j) { return j % 3 == 0; };\n        case QRMaskPattern.PATTERN011 :\n          return function(i, j) { return (i + j) % 3 == 0; };\n        case QRMaskPattern.PATTERN100 :\n          return function(i, j) { return (Math.floor(i / 2) + Math.floor(j / 3) ) % 2 == 0; };\n        case QRMaskPattern.PATTERN101 :\n          return function(i, j) { return (i * j) % 2 + (i * j) % 3 == 0; };\n        case QRMaskPattern.PATTERN110 :\n          return function(i, j) { return ( (i * j) % 2 + (i * j) % 3) % 2 == 0; };\n        case QRMaskPattern.PATTERN111 :\n          return function(i, j) { return ( (i * j) % 3 + (i + j) % 2) % 2 == 0; };\n  \n        default :\n          throw 'bad maskPattern:' + maskPattern;\n        }\n      };\n  \n      _this.getErrorCorrectPolynomial = function(errorCorrectLength) {\n        var a = qrPolynomial([1], 0);\n        for (var i = 0; i < errorCorrectLength; i += 1) {\n          a = a.multiply(qrPolynomial([1, QRMath.gexp(i)], 0) );\n        }\n        return a;\n      };\n  \n      _this.getLengthInBits = function(mode, type) {\n  \n        if (1 <= type && type < 10) {\n  \n          // 1 - 9\n  \n          switch(mode) {\n          case QRMode.MODE_NUMBER    : return 10;\n          case QRMode.MODE_ALPHA_NUM : return 9;\n          case QRMode.MODE_8BIT_BYTE : return 8;\n          case QRMode.MODE_KANJI     : return 8;\n          default :\n            throw 'mode:' + mode;\n          }\n  \n        } else if (type < 27) {\n  \n          // 10 - 26\n  \n          switch(mode) {\n          case QRMode.MODE_NUMBER    : return 12;\n          case QRMode.MODE_ALPHA_NUM : return 11;\n          case QRMode.MODE_8BIT_BYTE : return 16;\n          case QRMode.MODE_KANJI     : return 10;\n          default :\n            throw 'mode:' + mode;\n          }\n  \n        } else if (type < 41) {\n  \n          // 27 - 40\n  \n          switch(mode) {\n          case QRMode.MODE_NUMBER    : return 14;\n          case QRMode.MODE_ALPHA_NUM : return 13;\n          case QRMode.MODE_8BIT_BYTE : return 16;\n          case QRMode.MODE_KANJI     : return 12;\n          default :\n            throw 'mode:' + mode;\n          }\n  \n        } else {\n          throw 'type:' + type;\n        }\n      };\n  \n      _this.getLostPoint = function(qrcode) {\n  \n        var moduleCount = qrcode.getModuleCount();\n  \n        var lostPoint = 0;\n  \n        // LEVEL1\n  \n        for (var row = 0; row < moduleCount; row += 1) {\n          for (var col = 0; col < moduleCount; col += 1) {\n  \n            var sameCount = 0;\n            var dark = qrcode.isDark(row, col);\n  \n            for (var r = -1; r <= 1; r += 1) {\n  \n              if (row + r < 0 || moduleCount <= row + r) {\n                continue;\n              }\n  \n              for (var c = -1; c <= 1; c += 1) {\n  \n                if (col + c < 0 || moduleCount <= col + c) {\n                  continue;\n                }\n  \n                if (r == 0 && c == 0) {\n                  continue;\n                }\n  \n                if (dark == qrcode.isDark(row + r, col + c) ) {\n                  sameCount += 1;\n                }\n              }\n            }\n  \n            if (sameCount > 5) {\n              lostPoint += (3 + sameCount - 5);\n            }\n          }\n        };\n  \n        // LEVEL2\n  \n        for (var row = 0; row < moduleCount - 1; row += 1) {\n          for (var col = 0; col < moduleCount - 1; col += 1) {\n            var count = 0;\n            if (qrcode.isDark(row, col) ) count += 1;\n            if (qrcode.isDark(row + 1, col) ) count += 1;\n            if (qrcode.isDark(row, col + 1) ) count += 1;\n            if (qrcode.isDark(row + 1, col + 1) ) count += 1;\n            if (count == 0 || count == 4) {\n              lostPoint += 3;\n            }\n          }\n        }\n  \n        // LEVEL3\n  \n        for (var row = 0; row < moduleCount; row += 1) {\n          for (var col = 0; col < moduleCount - 6; col += 1) {\n            if (qrcode.isDark(row, col)\n                && !qrcode.isDark(row, col + 1)\n                &&  qrcode.isDark(row, col + 2)\n                &&  qrcode.isDark(row, col + 3)\n                &&  qrcode.isDark(row, col + 4)\n                && !qrcode.isDark(row, col + 5)\n                &&  qrcode.isDark(row, col + 6) ) {\n              lostPoint += 40;\n            }\n          }\n        }\n  \n        for (var col = 0; col < moduleCount; col += 1) {\n          for (var row = 0; row < moduleCount - 6; row += 1) {\n            if (qrcode.isDark(row, col)\n                && !qrcode.isDark(row + 1, col)\n                &&  qrcode.isDark(row + 2, col)\n                &&  qrcode.isDark(row + 3, col)\n                &&  qrcode.isDark(row + 4, col)\n                && !qrcode.isDark(row + 5, col)\n                &&  qrcode.isDark(row + 6, col) ) {\n              lostPoint += 40;\n            }\n          }\n        }\n  \n        // LEVEL4\n  \n        var darkCount = 0;\n  \n        for (var col = 0; col < moduleCount; col += 1) {\n          for (var row = 0; row < moduleCount; row += 1) {\n            if (qrcode.isDark(row, col) ) {\n              darkCount += 1;\n            }\n          }\n        }\n  \n        var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;\n        lostPoint += ratio * 10;\n  \n        return lostPoint;\n      };\n  \n      return _this;\n    }();\n  \n    //---------------------------------------------------------------------\n    // QRMath\n    //---------------------------------------------------------------------\n  \n    var QRMath = function() {\n  \n      var EXP_TABLE = new Array(256);\n      var LOG_TABLE = new Array(256);\n  \n      // initialize tables\n      for (var i = 0; i < 8; i += 1) {\n        EXP_TABLE[i] = 1 << i;\n      }\n      for (var i = 8; i < 256; i += 1) {\n        EXP_TABLE[i] = EXP_TABLE[i - 4]\n          ^ EXP_TABLE[i - 5]\n          ^ EXP_TABLE[i - 6]\n          ^ EXP_TABLE[i - 8];\n      }\n      for (var i = 0; i < 255; i += 1) {\n        LOG_TABLE[EXP_TABLE[i] ] = i;\n      }\n  \n      var _this = {};\n  \n      _this.glog = function(n) {\n  \n        if (n < 1) {\n          throw 'glog(' + n + ')';\n        }\n  \n        return LOG_TABLE[n];\n      };\n  \n      _this.gexp = function(n) {\n  \n        while (n < 0) {\n          n += 255;\n        }\n  \n        while (n >= 256) {\n          n -= 255;\n        }\n  \n        return EXP_TABLE[n];\n      };\n  \n      return _this;\n    }();\n  \n    //---------------------------------------------------------------------\n    // qrPolynomial\n    //---------------------------------------------------------------------\n  \n    function qrPolynomial(num, shift) {\n  \n      if (typeof num.length == 'undefined') {\n        throw num.length + '/' + shift;\n      }\n  \n      var _num = function() {\n        var offset = 0;\n        while (offset < num.length && num[offset] == 0) {\n          offset += 1;\n        }\n        var _num = new Array(num.length - offset + shift);\n        for (var i = 0; i < num.length - offset; i += 1) {\n          _num[i] = num[i + offset];\n        }\n        return _num;\n      }();\n  \n      var _this = {};\n  \n      _this.getAt = function(index) {\n        return _num[index];\n      };\n  \n      _this.getLength = function() {\n        return _num.length;\n      };\n  \n      _this.multiply = function(e) {\n  \n        var num = new Array(_this.getLength() + e.getLength() - 1);\n  \n        for (var i = 0; i < _this.getLength(); i += 1) {\n          for (var j = 0; j < e.getLength(); j += 1) {\n            num[i + j] ^= QRMath.gexp(QRMath.glog(_this.getAt(i) ) + QRMath.glog(e.getAt(j) ) );\n          }\n        }\n  \n        return qrPolynomial(num, 0);\n      };\n  \n      _this.mod = function(e) {\n  \n        if (_this.getLength() - e.getLength() < 0) {\n          return _this;\n        }\n  \n        var ratio = QRMath.glog(_this.getAt(0) ) - QRMath.glog(e.getAt(0) );\n  \n        var num = new Array(_this.getLength() );\n        for (var i = 0; i < _this.getLength(); i += 1) {\n          num[i] = _this.getAt(i);\n        }\n  \n        for (var i = 0; i < e.getLength(); i += 1) {\n          num[i] ^= QRMath.gexp(QRMath.glog(e.getAt(i) ) + ratio);\n        }\n  \n        // recursive call\n        return qrPolynomial(num, 0).mod(e);\n      };\n  \n      return _this;\n    };\n  \n    //---------------------------------------------------------------------\n    // QRRSBlock\n    //---------------------------------------------------------------------\n  \n    var QRRSBlock = function() {\n  \n      var RS_BLOCK_TABLE = [\n  \n        // L\n        // M\n        // Q\n        // H\n  \n        // 1\n        [1, 26, 19],\n        [1, 26, 16],\n        [1, 26, 13],\n        [1, 26, 9],\n  \n        // 2\n        [1, 44, 34],\n        [1, 44, 28],\n        [1, 44, 22],\n        [1, 44, 16],\n  \n        // 3\n        [1, 70, 55],\n        [1, 70, 44],\n        [2, 35, 17],\n        [2, 35, 13],\n  \n        // 4\n        [1, 100, 80],\n        [2, 50, 32],\n        [2, 50, 24],\n        [4, 25, 9],\n  \n        // 5\n        [1, 134, 108],\n        [2, 67, 43],\n        [2, 33, 15, 2, 34, 16],\n        [2, 33, 11, 2, 34, 12],\n  \n        // 6\n        [2, 86, 68],\n        [4, 43, 27],\n        [4, 43, 19],\n        [4, 43, 15],\n  \n        // 7\n        [2, 98, 78],\n        [4, 49, 31],\n        [2, 32, 14, 4, 33, 15],\n        [4, 39, 13, 1, 40, 14],\n  \n        // 8\n        [2, 121, 97],\n        [2, 60, 38, 2, 61, 39],\n        [4, 40, 18, 2, 41, 19],\n        [4, 40, 14, 2, 41, 15],\n  \n        // 9\n        [2, 146, 116],\n        [3, 58, 36, 2, 59, 37],\n        [4, 36, 16, 4, 37, 17],\n        [4, 36, 12, 4, 37, 13],\n  \n        // 10\n        [2, 86, 68, 2, 87, 69],\n        [4, 69, 43, 1, 70, 44],\n        [6, 43, 19, 2, 44, 20],\n        [6, 43, 15, 2, 44, 16],\n  \n        // 11\n        [4, 101, 81],\n        [1, 80, 50, 4, 81, 51],\n        [4, 50, 22, 4, 51, 23],\n        [3, 36, 12, 8, 37, 13],\n  \n        // 12\n        [2, 116, 92, 2, 117, 93],\n        [6, 58, 36, 2, 59, 37],\n        [4, 46, 20, 6, 47, 21],\n        [7, 42, 14, 4, 43, 15],\n  \n        // 13\n        [4, 133, 107],\n        [8, 59, 37, 1, 60, 38],\n        [8, 44, 20, 4, 45, 21],\n        [12, 33, 11, 4, 34, 12],\n  \n        // 14\n        [3, 145, 115, 1, 146, 116],\n        [4, 64, 40, 5, 65, 41],\n        [11, 36, 16, 5, 37, 17],\n        [11, 36, 12, 5, 37, 13],\n  \n        // 15\n        [5, 109, 87, 1, 110, 88],\n        [5, 65, 41, 5, 66, 42],\n        [5, 54, 24, 7, 55, 25],\n        [11, 36, 12, 7, 37, 13],\n  \n        // 16\n        [5, 122, 98, 1, 123, 99],\n        [7, 73, 45, 3, 74, 46],\n        [15, 43, 19, 2, 44, 20],\n        [3, 45, 15, 13, 46, 16],\n  \n        // 17\n        [1, 135, 107, 5, 136, 108],\n        [10, 74, 46, 1, 75, 47],\n        [1, 50, 22, 15, 51, 23],\n        [2, 42, 14, 17, 43, 15],\n  \n        // 18\n        [5, 150, 120, 1, 151, 121],\n        [9, 69, 43, 4, 70, 44],\n        [17, 50, 22, 1, 51, 23],\n        [2, 42, 14, 19, 43, 15],\n  \n        // 19\n        [3, 141, 113, 4, 142, 114],\n        [3, 70, 44, 11, 71, 45],\n        [17, 47, 21, 4, 48, 22],\n        [9, 39, 13, 16, 40, 14],\n  \n        // 20\n        [3, 135, 107, 5, 136, 108],\n        [3, 67, 41, 13, 68, 42],\n        [15, 54, 24, 5, 55, 25],\n        [15, 43, 15, 10, 44, 16],\n  \n        // 21\n        [4, 144, 116, 4, 145, 117],\n        [17, 68, 42],\n        [17, 50, 22, 6, 51, 23],\n        [19, 46, 16, 6, 47, 17],\n  \n        // 22\n        [2, 139, 111, 7, 140, 112],\n        [17, 74, 46],\n        [7, 54, 24, 16, 55, 25],\n        [34, 37, 13],\n  \n        // 23\n        [4, 151, 121, 5, 152, 122],\n        [4, 75, 47, 14, 76, 48],\n        [11, 54, 24, 14, 55, 25],\n        [16, 45, 15, 14, 46, 16],\n  \n        // 24\n        [6, 147, 117, 4, 148, 118],\n        [6, 73, 45, 14, 74, 46],\n        [11, 54, 24, 16, 55, 25],\n        [30, 46, 16, 2, 47, 17],\n  \n        // 25\n        [8, 132, 106, 4, 133, 107],\n        [8, 75, 47, 13, 76, 48],\n        [7, 54, 24, 22, 55, 25],\n        [22, 45, 15, 13, 46, 16],\n  \n        // 26\n        [10, 142, 114, 2, 143, 115],\n        [19, 74, 46, 4, 75, 47],\n        [28, 50, 22, 6, 51, 23],\n        [33, 46, 16, 4, 47, 17],\n  \n        // 27\n        [8, 152, 122, 4, 153, 123],\n        [22, 73, 45, 3, 74, 46],\n        [8, 53, 23, 26, 54, 24],\n        [12, 45, 15, 28, 46, 16],\n  \n        // 28\n        [3, 147, 117, 10, 148, 118],\n        [3, 73, 45, 23, 74, 46],\n        [4, 54, 24, 31, 55, 25],\n        [11, 45, 15, 31, 46, 16],\n  \n        // 29\n        [7, 146, 116, 7, 147, 117],\n        [21, 73, 45, 7, 74, 46],\n        [1, 53, 23, 37, 54, 24],\n        [19, 45, 15, 26, 46, 16],\n  \n        // 30\n        [5, 145, 115, 10, 146, 116],\n        [19, 75, 47, 10, 76, 48],\n        [15, 54, 24, 25, 55, 25],\n        [23, 45, 15, 25, 46, 16],\n  \n        // 31\n        [13, 145, 115, 3, 146, 116],\n        [2, 74, 46, 29, 75, 47],\n        [42, 54, 24, 1, 55, 25],\n        [23, 45, 15, 28, 46, 16],\n  \n        // 32\n        [17, 145, 115],\n        [10, 74, 46, 23, 75, 47],\n        [10, 54, 24, 35, 55, 25],\n        [19, 45, 15, 35, 46, 16],\n  \n        // 33\n        [17, 145, 115, 1, 146, 116],\n        [14, 74, 46, 21, 75, 47],\n        [29, 54, 24, 19, 55, 25],\n        [11, 45, 15, 46, 46, 16],\n  \n        // 34\n        [13, 145, 115, 6, 146, 116],\n        [14, 74, 46, 23, 75, 47],\n        [44, 54, 24, 7, 55, 25],\n        [59, 46, 16, 1, 47, 17],\n  \n        // 35\n        [12, 151, 121, 7, 152, 122],\n        [12, 75, 47, 26, 76, 48],\n        [39, 54, 24, 14, 55, 25],\n        [22, 45, 15, 41, 46, 16],\n  \n        // 36\n        [6, 151, 121, 14, 152, 122],\n        [6, 75, 47, 34, 76, 48],\n        [46, 54, 24, 10, 55, 25],\n        [2, 45, 15, 64, 46, 16],\n  \n        // 37\n        [17, 152, 122, 4, 153, 123],\n        [29, 74, 46, 14, 75, 47],\n        [49, 54, 24, 10, 55, 25],\n        [24, 45, 15, 46, 46, 16],\n  \n        // 38\n        [4, 152, 122, 18, 153, 123],\n        [13, 74, 46, 32, 75, 47],\n        [48, 54, 24, 14, 55, 25],\n        [42, 45, 15, 32, 46, 16],\n  \n        // 39\n        [20, 147, 117, 4, 148, 118],\n        [40, 75, 47, 7, 76, 48],\n        [43, 54, 24, 22, 55, 25],\n        [10, 45, 15, 67, 46, 16],\n  \n        // 40\n        [19, 148, 118, 6, 149, 119],\n        [18, 75, 47, 31, 76, 48],\n        [34, 54, 24, 34, 55, 25],\n        [20, 45, 15, 61, 46, 16]\n      ];\n  \n      var qrRSBlock = function(totalCount, dataCount) {\n        var _this = {};\n        _this.totalCount = totalCount;\n        _this.dataCount = dataCount;\n        return _this;\n      };\n  \n      var _this = {};\n  \n      var getRsBlockTable = function(typeNumber, errorCorrectionLevel) {\n  \n        switch(errorCorrectionLevel) {\n        case QRErrorCorrectionLevel.L :\n          return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];\n        case QRErrorCorrectionLevel.M :\n          return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];\n        case QRErrorCorrectionLevel.Q :\n          return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];\n        case QRErrorCorrectionLevel.H :\n          return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];\n        default :\n          return undefined;\n        }\n      };\n  \n      _this.getRSBlocks = function(typeNumber, errorCorrectionLevel) {\n  \n        var rsBlock = getRsBlockTable(typeNumber, errorCorrectionLevel);\n  \n        if (typeof rsBlock == 'undefined') {\n          throw 'bad rs block @ typeNumber:' + typeNumber +\n              '/errorCorrectionLevel:' + errorCorrectionLevel;\n        }\n  \n        var length = rsBlock.length / 3;\n  \n        var list = [];\n  \n        for (var i = 0; i < length; i += 1) {\n  \n          var count = rsBlock[i * 3 + 0];\n          var totalCount = rsBlock[i * 3 + 1];\n          var dataCount = rsBlock[i * 3 + 2];\n  \n          for (var j = 0; j < count; j += 1) {\n            list.push(qrRSBlock(totalCount, dataCount) );\n          }\n        }\n  \n        return list;\n      };\n  \n      return _this;\n    }();\n  \n    //---------------------------------------------------------------------\n    // qrBitBuffer\n    //---------------------------------------------------------------------\n  \n    var qrBitBuffer = function() {\n  \n      var _buffer = [];\n      var _length = 0;\n  \n      var _this = {};\n  \n      _this.getBuffer = function() {\n        return _buffer;\n      };\n  \n      _this.getAt = function(index) {\n        var bufIndex = Math.floor(index / 8);\n        return ( (_buffer[bufIndex] >>> (7 - index % 8) ) & 1) == 1;\n      };\n  \n      _this.put = function(num, length) {\n        for (var i = 0; i < length; i += 1) {\n          _this.putBit( ( (num >>> (length - i - 1) ) & 1) == 1);\n        }\n      };\n  \n      _this.getLengthInBits = function() {\n        return _length;\n      };\n  \n      _this.putBit = function(bit) {\n  \n        var bufIndex = Math.floor(_length / 8);\n        if (_buffer.length <= bufIndex) {\n          _buffer.push(0);\n        }\n  \n        if (bit) {\n          _buffer[bufIndex] |= (0x80 >>> (_length % 8) );\n        }\n  \n        _length += 1;\n      };\n  \n      return _this;\n    };\n  \n    //---------------------------------------------------------------------\n    // qrNumber\n    //---------------------------------------------------------------------\n  \n    var qrNumber = function(data) {\n  \n      var _mode = QRMode.MODE_NUMBER;\n      var _data = data;\n  \n      var _this = {};\n  \n      _this.getMode = function() {\n        return _mode;\n      };\n  \n      _this.getLength = function(buffer) {\n        return _data.length;\n      };\n  \n      _this.write = function(buffer) {\n  \n        var data = _data;\n  \n        var i = 0;\n  \n        while (i + 2 < data.length) {\n          buffer.put(strToNum(data.substring(i, i + 3) ), 10);\n          i += 3;\n        }\n  \n        if (i < data.length) {\n          if (data.length - i == 1) {\n            buffer.put(strToNum(data.substring(i, i + 1) ), 4);\n          } else if (data.length - i == 2) {\n            buffer.put(strToNum(data.substring(i, i + 2) ), 7);\n          }\n        }\n      };\n  \n      var strToNum = function(s) {\n        var num = 0;\n        for (var i = 0; i < s.length; i += 1) {\n          num = num * 10 + chatToNum(s.charAt(i) );\n        }\n        return num;\n      };\n  \n      var chatToNum = function(c) {\n        if ('0' <= c && c <= '9') {\n          return c.charCodeAt(0) - '0'.charCodeAt(0);\n        }\n        throw 'illegal char :' + c;\n      };\n  \n      return _this;\n    };\n  \n    //---------------------------------------------------------------------\n    // qrAlphaNum\n    //---------------------------------------------------------------------\n  \n    var qrAlphaNum = function(data) {\n  \n      var _mode = QRMode.MODE_ALPHA_NUM;\n      var _data = data;\n  \n      var _this = {};\n  \n      _this.getMode = function() {\n        return _mode;\n      };\n  \n      _this.getLength = function(buffer) {\n        return _data.length;\n      };\n  \n      _this.write = function(buffer) {\n  \n        var s = _data;\n  \n        var i = 0;\n  \n        while (i + 1 < s.length) {\n          buffer.put(\n            getCode(s.charAt(i) ) * 45 +\n            getCode(s.charAt(i + 1) ), 11);\n          i += 2;\n        }\n  \n        if (i < s.length) {\n          buffer.put(getCode(s.charAt(i) ), 6);\n        }\n      };\n  \n      var getCode = function(c) {\n  \n        if ('0' <= c && c <= '9') {\n          return c.charCodeAt(0) - '0'.charCodeAt(0);\n        } else if ('A' <= c && c <= 'Z') {\n          return c.charCodeAt(0) - 'A'.charCodeAt(0) + 10;\n        } else {\n          switch (c) {\n          case ' ' : return 36;\n          case '$' : return 37;\n          case '%' : return 38;\n          case '*' : return 39;\n          case '+' : return 40;\n          case '-' : return 41;\n          case '.' : return 42;\n          case '/' : return 43;\n          case ':' : return 44;\n          default :\n            throw 'illegal char :' + c;\n          }\n        }\n      };\n  \n      return _this;\n    };\n  \n    //---------------------------------------------------------------------\n    // qr8BitByte\n    //---------------------------------------------------------------------\n  \n    var qr8BitByte = function(data) {\n  \n      var _mode = QRMode.MODE_8BIT_BYTE;\n      var _data = data;\n      var _bytes = qrcode.stringToBytes(data);\n  \n      var _this = {};\n  \n      _this.getMode = function() {\n        return _mode;\n      };\n  \n      _this.getLength = function(buffer) {\n        return _bytes.length;\n      };\n  \n      _this.write = function(buffer) {\n        for (var i = 0; i < _bytes.length; i += 1) {\n          buffer.put(_bytes[i], 8);\n        }\n      };\n  \n      return _this;\n    };\n  \n    //---------------------------------------------------------------------\n    // qrKanji\n    //---------------------------------------------------------------------\n  \n    var qrKanji = function(data) {\n  \n      var _mode = QRMode.MODE_KANJI;\n      var _data = data;\n  \n      var stringToBytes = qrcode.stringToBytesFuncs['SJIS'];\n      if (!stringToBytes) {\n        throw 'sjis not supported.';\n      }\n      !function(c, code) {\n        // self test for sjis support.\n        var test = stringToBytes(c);\n        if (test.length != 2 || ( (test[0] << 8) | test[1]) != code) {\n          throw 'sjis not supported.';\n        }\n      }('\\u53cb', 0x9746);\n  \n      var _bytes = stringToBytes(data);\n  \n      var _this = {};\n  \n      _this.getMode = function() {\n        return _mode;\n      };\n  \n      _this.getLength = function(buffer) {\n        return ~~(_bytes.length / 2);\n      };\n  \n      _this.write = function(buffer) {\n  \n        var data = _bytes;\n  \n        var i = 0;\n  \n        while (i + 1 < data.length) {\n  \n          var c = ( (0xff & data[i]) << 8) | (0xff & data[i + 1]);\n  \n          if (0x8140 <= c && c <= 0x9FFC) {\n            c -= 0x8140;\n          } else if (0xE040 <= c && c <= 0xEBBF) {\n            c -= 0xC140;\n          } else {\n            throw 'illegal char at ' + (i + 1) + '/' + c;\n          }\n  \n          c = ( (c >>> 8) & 0xff) * 0xC0 + (c & 0xff);\n  \n          buffer.put(c, 13);\n  \n          i += 2;\n        }\n  \n        if (i < data.length) {\n          throw 'illegal char at ' + (i + 1);\n        }\n      };\n  \n      return _this;\n    };\n  \n    //=====================================================================\n    // GIF Support etc.\n    //\n  \n    //---------------------------------------------------------------------\n    // byteArrayOutputStream\n    //---------------------------------------------------------------------\n  \n    var byteArrayOutputStream = function() {\n  \n      var _bytes = [];\n  \n      var _this = {};\n  \n      _this.writeByte = function(b) {\n        _bytes.push(b & 0xff);\n      };\n  \n      _this.writeShort = function(i) {\n        _this.writeByte(i);\n        _this.writeByte(i >>> 8);\n      };\n  \n      _this.writeBytes = function(b, off, len) {\n        off = off || 0;\n        len = len || b.length;\n        for (var i = 0; i < len; i += 1) {\n          _this.writeByte(b[i + off]);\n        }\n      };\n  \n      _this.writeString = function(s) {\n        for (var i = 0; i < s.length; i += 1) {\n          _this.writeByte(s.charCodeAt(i) );\n        }\n      };\n  \n      _this.toByteArray = function() {\n        return _bytes;\n      };\n  \n      _this.toString = function() {\n        var s = '';\n        s += '[';\n        for (var i = 0; i < _bytes.length; i += 1) {\n          if (i > 0) {\n            s += ',';\n          }\n          s += _bytes[i];\n        }\n        s += ']';\n        return s;\n      };\n  \n      return _this;\n    };\n  \n    //---------------------------------------------------------------------\n    // base64EncodeOutputStream\n    //---------------------------------------------------------------------\n  \n    var base64EncodeOutputStream = function() {\n  \n      var _buffer = 0;\n      var _buflen = 0;\n      var _length = 0;\n      var _base64 = '';\n  \n      var _this = {};\n  \n      var writeEncoded = function(b) {\n        _base64 += String.fromCharCode(encode(b & 0x3f) );\n      };\n  \n      var encode = function(n) {\n        if (n < 0) {\n          // error.\n        } else if (n < 26) {\n          return 0x41 + n;\n        } else if (n < 52) {\n          return 0x61 + (n - 26);\n        } else if (n < 62) {\n          return 0x30 + (n - 52);\n        } else if (n == 62) {\n          return 0x2b;\n        } else if (n == 63) {\n          return 0x2f;\n        }\n        throw 'n:' + n;\n      };\n  \n      _this.writeByte = function(n) {\n  \n        _buffer = (_buffer << 8) | (n & 0xff);\n        _buflen += 8;\n        _length += 1;\n  \n        while (_buflen >= 6) {\n          writeEncoded(_buffer >>> (_buflen - 6) );\n          _buflen -= 6;\n        }\n      };\n  \n      _this.flush = function() {\n  \n        if (_buflen > 0) {\n          writeEncoded(_buffer << (6 - _buflen) );\n          _buffer = 0;\n          _buflen = 0;\n        }\n  \n        if (_length % 3 != 0) {\n          // padding\n          var padlen = 3 - _length % 3;\n          for (var i = 0; i < padlen; i += 1) {\n            _base64 += '=';\n          }\n        }\n      };\n  \n      _this.toString = function() {\n        return _base64;\n      };\n  \n      return _this;\n    };\n  \n    //---------------------------------------------------------------------\n    // base64DecodeInputStream\n    //---------------------------------------------------------------------\n  \n    var base64DecodeInputStream = function(str) {\n  \n      var _str = str;\n      var _pos = 0;\n      var _buffer = 0;\n      var _buflen = 0;\n  \n      var _this = {};\n  \n      _this.read = function() {\n  \n        while (_buflen < 8) {\n  \n          if (_pos >= _str.length) {\n            if (_buflen == 0) {\n              return -1;\n            }\n            throw 'unexpected end of file./' + _buflen;\n          }\n  \n          var c = _str.charAt(_pos);\n          _pos += 1;\n  \n          if (c == '=') {\n            _buflen = 0;\n            return -1;\n          } else if (c.match(/^\\s$/) ) {\n            // ignore if whitespace.\n            continue;\n          }\n  \n          _buffer = (_buffer << 6) | decode(c.charCodeAt(0) );\n          _buflen += 6;\n        }\n  \n        var n = (_buffer >>> (_buflen - 8) ) & 0xff;\n        _buflen -= 8;\n        return n;\n      };\n  \n      var decode = function(c) {\n        if (0x41 <= c && c <= 0x5a) {\n          return c - 0x41;\n        } else if (0x61 <= c && c <= 0x7a) {\n          return c - 0x61 + 26;\n        } else if (0x30 <= c && c <= 0x39) {\n          return c - 0x30 + 52;\n        } else if (c == 0x2b) {\n          return 62;\n        } else if (c == 0x2f) {\n          return 63;\n        } else {\n          throw 'c:' + c;\n        }\n      };\n  \n      return _this;\n    };\n  \n    //---------------------------------------------------------------------\n    // gifImage (B/W)\n    //---------------------------------------------------------------------\n  \n    var gifImage = function(width, height) {\n  \n      var _width = width;\n      var _height = height;\n      var _data = new Array(width * height);\n  \n      var _this = {};\n  \n      _this.setPixel = function(x, y, pixel) {\n        _data[y * _width + x] = pixel;\n      };\n  \n      _this.write = function(out) {\n  \n        //---------------------------------\n        // GIF Signature\n  \n        out.writeString('GIF87a');\n  \n        //---------------------------------\n        // Screen Descriptor\n  \n        out.writeShort(_width);\n        out.writeShort(_height);\n  \n        out.writeByte(0x80); // 2bit\n        out.writeByte(0);\n        out.writeByte(0);\n  \n        //---------------------------------\n        // Global Color Map\n  \n        // black\n        out.writeByte(0x00);\n        out.writeByte(0x00);\n        out.writeByte(0x00);\n  \n        // white\n        out.writeByte(0xff);\n        out.writeByte(0xff);\n        out.writeByte(0xff);\n  \n        //---------------------------------\n        // Image Descriptor\n  \n        out.writeString(',');\n        out.writeShort(0);\n        out.writeShort(0);\n        out.writeShort(_width);\n        out.writeShort(_height);\n        out.writeByte(0);\n  \n        //---------------------------------\n        // Local Color Map\n  \n        //---------------------------------\n        // Raster Data\n  \n        var lzwMinCodeSize = 2;\n        var raster = getLZWRaster(lzwMinCodeSize);\n  \n        out.writeByte(lzwMinCodeSize);\n  \n        var offset = 0;\n  \n        while (raster.length - offset > 255) {\n          out.writeByte(255);\n          out.writeBytes(raster, offset, 255);\n          offset += 255;\n        }\n  \n        out.writeByte(raster.length - offset);\n        out.writeBytes(raster, offset, raster.length - offset);\n        out.writeByte(0x00);\n  \n        //---------------------------------\n        // GIF Terminator\n        out.writeString(';');\n      };\n  \n      var bitOutputStream = function(out) {\n  \n        var _out = out;\n        var _bitLength = 0;\n        var _bitBuffer = 0;\n  \n        var _this = {};\n  \n        _this.write = function(data, length) {\n  \n          if ( (data >>> length) != 0) {\n            throw 'length over';\n          }\n  \n          while (_bitLength + length >= 8) {\n            _out.writeByte(0xff & ( (data << _bitLength) | _bitBuffer) );\n            length -= (8 - _bitLength);\n            data >>>= (8 - _bitLength);\n            _bitBuffer = 0;\n            _bitLength = 0;\n          }\n  \n          _bitBuffer = (data << _bitLength) | _bitBuffer;\n          _bitLength = _bitLength + length;\n        };\n  \n        _this.flush = function() {\n          if (_bitLength > 0) {\n            _out.writeByte(_bitBuffer);\n          }\n        };\n  \n        return _this;\n      };\n  \n      var getLZWRaster = function(lzwMinCodeSize) {\n  \n        var clearCode = 1 << lzwMinCodeSize;\n        var endCode = (1 << lzwMinCodeSize) + 1;\n        var bitLength = lzwMinCodeSize + 1;\n  \n        // Setup LZWTable\n        var table = lzwTable();\n  \n        for (var i = 0; i < clearCode; i += 1) {\n          table.add(String.fromCharCode(i) );\n        }\n        table.add(String.fromCharCode(clearCode) );\n        table.add(String.fromCharCode(endCode) );\n  \n        var byteOut = byteArrayOutputStream();\n        var bitOut = bitOutputStream(byteOut);\n  \n        // clear code\n        bitOut.write(clearCode, bitLength);\n  \n        var dataIndex = 0;\n  \n        var s = String.fromCharCode(_data[dataIndex]);\n        dataIndex += 1;\n  \n        while (dataIndex < _data.length) {\n  \n          var c = String.fromCharCode(_data[dataIndex]);\n          dataIndex += 1;\n  \n          if (table.contains(s + c) ) {\n  \n            s = s + c;\n  \n          } else {\n  \n            bitOut.write(table.indexOf(s), bitLength);\n  \n            if (table.size() < 0xfff) {\n  \n              if (table.size() == (1 << bitLength) ) {\n                bitLength += 1;\n              }\n  \n              table.add(s + c);\n            }\n  \n            s = c;\n          }\n        }\n  \n        bitOut.write(table.indexOf(s), bitLength);\n  \n        // end code\n        bitOut.write(endCode, bitLength);\n  \n        bitOut.flush();\n  \n        return byteOut.toByteArray();\n      };\n  \n      var lzwTable = function() {\n  \n        var _map = {};\n        var _size = 0;\n  \n        var _this = {};\n  \n        _this.add = function(key) {\n          if (_this.contains(key) ) {\n            throw 'dup key:' + key;\n          }\n          _map[key] = _size;\n          _size += 1;\n        };\n  \n        _this.size = function() {\n          return _size;\n        };\n  \n        _this.indexOf = function(key) {\n          return _map[key];\n        };\n  \n        _this.contains = function(key) {\n          return typeof _map[key] != 'undefined';\n        };\n  \n        return _this;\n      };\n  \n      return _this;\n    };\n  \n    var createDataURL = function(width, height, getPixel) {\n      var gif = gifImage(width, height);\n      for (var y = 0; y < height; y += 1) {\n        for (var x = 0; x < width; x += 1) {\n          gif.setPixel(x, y, getPixel(x, y) );\n        }\n      }\n  \n      var b = byteArrayOutputStream();\n      gif.write(b);\n  \n      var base64 = base64EncodeOutputStream();\n      var bytes = b.toByteArray();\n      for (var i = 0; i < bytes.length; i += 1) {\n        base64.writeByte(bytes[i]);\n      }\n      base64.flush();\n  \n      return 'data:image/gif;base64,' + base64;\n    };\n  \n    //---------------------------------------------------------------------\n    // returns qrcode function.\n  \n    return qrcode;\n  }();\n  \n  // multibyte support\n  !function() {\n  \n    accurate.utils.qrcode.stringToBytesFuncs['UTF-8'] = function(s) {\n      // http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\n      function toUTF8Array(str) {\n        var utf8 = [];\n        for (var i=0; i < str.length; i++) {\n          var charcode = str.charCodeAt(i);\n          if (charcode < 0x80) utf8.push(charcode);\n          else if (charcode < 0x800) {\n            utf8.push(0xc0 | (charcode >> 6),\n                0x80 | (charcode & 0x3f));\n          }\n          else if (charcode < 0xd800 || charcode >= 0xe000) {\n            utf8.push(0xe0 | (charcode >> 12),\n                0x80 | ((charcode>>6) & 0x3f),\n                0x80 | (charcode & 0x3f));\n          }\n          // surrogate pair\n          else {\n            i++;\n            // UTF-16 encodes 0x10000-0x10FFFF by\n            // subtracting 0x10000 and splitting the\n            // 20 bits of 0x0-0xFFFFF into two halves\n            charcode = 0x10000 + (((charcode & 0x3ff)<<10)\n              | (str.charCodeAt(i) & 0x3ff));\n            utf8.push(0xf0 | (charcode >>18),\n                0x80 | ((charcode>>12) & 0x3f),\n                0x80 | ((charcode>>6) & 0x3f),\n                0x80 | (charcode & 0x3f));\n          }\n        }\n        return utf8;\n      }\n      return toUTF8Array(s);\n    };\n  \n  }();\n  \n  (function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    }\n  }(function () {\n      return accurate.utils.qrcode;\n  }));", "frappe.provide(\"accurate.utils\");\naccurate.utils.wait = function (ms) {\n    var d = new Date();\n    var d2 = null;\n    do { d2 = new Date(); }\n    while (d2 - d < ms);\n  }\n  ", "import \"./conf\";\n// import \"./qrcode\";\nimport \"./qr_code\";"],
  "mappings": "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",
  "names": []
}
